package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"LinkKrec/graph/loaders"
	"LinkKrec/graph/model"
	"LinkKrec/graph/util"
	query_builder "LinkKrec/querybuilder"
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/google/uuid"
)

// FromUser is the resolver for the fromUser field.
func (r *connectionRequestResolver) FromUser(ctx context.Context, obj *model.ConnectionRequest) (*model.User, error) {
	return loaders.GetUser(ctx, obj.FromUser.ID)
}

// ConnectedToUser is the resolver for the connectedToUser field.
func (r *connectionRequestResolver) ConnectedToUser(ctx context.Context, obj *model.ConnectionRequest) (*model.User, error) {
	return loaders.GetUser(ctx, obj.ConnectedToUser.ID)
}

// Vacancies is the resolver for the vacancies field.
func (r *employerResolver) Vacancies(ctx context.Context, obj *model.Employer) ([]*model.Vacancy, error) {
	ids := util.Map(obj.Vacancies, func(v *model.Vacancy) string {
		return v.ID
	})
	return loaders.GetVacancies(ctx, ids)
}

// Employees is the resolver for the employees field.
func (r *employerResolver) Employees(ctx context.Context, obj *model.Employer) ([]*model.User, error) {
	ids := util.Map(obj.Employees, func(u *model.User) string {
		return u.ID
	})
	return loaders.GetUsers(ctx, ids)
}

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterUserInput) (*model.User, error) {
	insert := fmt.Sprintf(`
		%s
		INSERT {
		    ?newUser a lr:User ;
		        lr:hasName ?name ;
		        lr:hasEmail ?email ;
		        lr:isEmployer ?isEmployer ;
		        lr:isProfileComplete false .
		}
		WHERE {
		    {
		        SELECT (COUNT(?existingUser) + 1 AS ?userCount)
		        WHERE {
		            ?existingUser a lr:User .
		        }
		    }
		    BIND(IRI(CONCAT(STR(lr:), "User", STR(?userCount))) AS ?newUser)
		    BIND("%s" AS ?name)
		    BIND("%s" AS ?email)
		    BIND(false AS ?isEmployer)
		}
		`, query_builder.PREFIXES, input.Name, input.Email)

	_, err := r.Repo.Query(insert)

	if err != nil {
		log.Println("Error registering user {}", err)
		return nil, err
	}
	query := fmt.Sprintf(`
			%s
			SELECT ?name ?email ?isEmployer
			WHERE {
			    ?user a lr:User ;
			        lr:hasName ?name ;
			        lr:hasEmail "john@example.com" ;
			        lr:isEmployer ?isEmployer .
			}
			LIMIT 1
		`, query_builder.PREFIXES)

	res, err := r.Repo.Query(query)

	if len(res.Solutions()) > 1 {
		panic("For some reason registering a user returned ")
	}
	for _, user := range res.Solutions() {
		// only 1 user
		return util.MapRdfUserToGQL(user)
	}

	return nil, fmt.Errorf("Could Not Register User Because i am working on it my g")
}

// CompleteUserProfile is the resolver for the completeUserProfile field.
func (r *mutationResolver) CompleteUserProfile(ctx context.Context, id *string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CompleteUserProfile - completeUserProfile"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// UpdateUserProfile is the resolver for the updateUserProfile field.
func (r *mutationResolver) UpdateUserProfile(ctx context.Context, id string, input model.UpdateProfileInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUserProfile - updateUserProfile"))
}

// AddConnectionRequest is the resolver for the addConnectionRequest field.
func (r *mutationResolver) AddConnectionRequest(ctx context.Context, fromUserID string, connectedToUserID string) (*model.ConnectionRequest, error) {
	requestID := uuid.New().String()

	q := fmt.Sprintf(`
		PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
		PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		PREFIX lr: <http://linkrec.example.org/schema#>

		INSERT {
		  lr:connectionRequest%s a lr:ConnectionRequest ;
		      lr:Id "%s" ;
		      lr:fromUser ?fromUser ;
		      lr:connectedToUser ?toUser ;
		      lr:requestStatus false .
		}
		WHERE {
		  ?fromUser a lr:User ;
		            lr:Id "%s" .
		  ?toUser a lr:User ;
		          lr:Id "%s" .
		}
		`, requestID, requestID, fromUserID, connectedToUserID)

	fmt.Println(q)

	err := r.UpdateRepo.Update(q)
	if err != nil {
		return nil, err
	}
	fmt.Println("err:", err)

	// If the query was successful, return the updated user
	return loaders.GetConnectionRequest(ctx, requestID)
}

// SetConnectionRequestStatusFalse is the resolver for the setConnectionRequestStatusFalse field.
func (r *mutationResolver) SetConnectionRequestStatusFalse(ctx context.Context, id string) (*model.ConnectionRequest, error) {
	panic(fmt.Errorf("not implemented: SetConnectionRequestStatusFalse - setConnectionRequestStatusFalse"))
}

// NotifyProfileVisit is the resolver for the notifyProfileVisit field.
func (r *mutationResolver) NotifyProfileVisit(ctx context.Context, visitorID string, visitedUserID string) (*model.Notification, error) {
	panic(fmt.Errorf("not implemented: NotifyProfileVisit - notifyProfileVisit"))
}

// CreateVacancy is the resolver for the createVacancy field.
func (r *mutationResolver) CreateVacancy(ctx context.Context, employerID string, input model.CreateVacancyInput) (*model.Vacancy, error) {
	panic(fmt.Errorf("not implemented: CreateVacancy - createVacancy"))
}

// UpdateVacancy is the resolver for the updateVacancy field.
func (r *mutationResolver) UpdateVacancy(ctx context.Context, id string, input model.CreateVacancyInput) (*model.Vacancy, error) {
	panic(fmt.Errorf("not implemented: UpdateVacancy - updateVacancy"))
}

// DeleteVacancy is the resolver for the deleteVacancy field.
func (r *mutationResolver) DeleteVacancy(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteVacancy - deleteVacancy"))
}

// UpdateUserLookingForOpportunities is the resolver for the updateUserLookingForOpportunities field.
func (r *mutationResolver) UpdateUserLookingForOpportunities(ctx context.Context, userID string, looking bool) (*model.User, error) {
	// Convert the `looking` boolean to a string representation
	lookingStr := strconv.FormatBool(looking)

	// SPARQL update query to change the isLookingForOpportunities value
	q := fmt.Sprintf(`
		PREFIX lr: <http://linkrec.example.org/schema#>
		PREFIX schema: <http://schema.org/>
		PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

        DELETE {
            ?user lr:isLookingForOpportunities ?currentValue .
        }
        INSERT {
            ?user lr:isLookingForOpportunities "%s"^^xsd:boolean .
        }
        WHERE {
            ?user a lr:User ;
            lr:Id "%s" ;
            lr:isLookingForOpportunities ?currentValue .
        }
    `, lookingStr, userID)
	fmt.Println(q)

	err := r.UpdateRepo.Update(q)
	if err != nil {
		return nil, err
	}
	fmt.Println(err)

	// If the query was successful, return the updated user
	return loaders.GetUser(ctx, userID)
}

// ForUser is the resolver for the forUser field.
func (r *notificationResolver) ForUser(ctx context.Context, obj *model.Notification) (*model.User, error) {
	return loaders.GetUser(ctx, obj.ForUser.ID)
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	return loaders.GetUser(ctx, id)
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context, name *string, location *string, isEmployer *bool, skills []*string, lookingForOpportunities *bool) ([]*model.User, error) {
	fmt.Println("GetUsers")
	q := query_builder.
		QueryBuilder().
		Select([]string{"id", "name", "email", "isEmployer", "location", "lookingForOpportunities"}).
		GroupConcat("skill", ", ", "skills", true).
		GroupConcat("connectionName", ", ", "connections", true).
		GroupConcat("educationEntryId", ", ", "educations", true).
		GroupConcat("experienceEntryId", ", ", "experiences", true).
		WhereSubject("user", "User").
		Where("Id", "id").
		Where("hasName", "name").
		Where("hasEmail", "email").
		Where("isEmployer", "isEmployer").
		Where("hasLocation", "location").
		Where("isLookingForOpportunities", "isLookingForOpportunities").
		Optional("hasSkill", "skill").
		Optional("hasConnection", "connection").
		WhereExtraction("connection", "Id", "connectionName").
		Optional("hasEducation", "educationEntry").
		WhereExtraction("educationEntry", "Id", "educationEntryId").
		Optional("hasExperience", "experienceEntry").
		WhereExtraction("experienceEntry", "Id", "experienceEntryId").
		Bind("isLookingForOpportunities", "lookingForOpportunities")
	if name != nil {
		q.Filter("name", []string{*name}, query_builder.EQ)
	}
	if location != nil {
		q.Filter("location", []string{*location}, query_builder.EQ)
	}
	if isEmployer != nil {
		q.Filter("isEmployer", []string{strconv.FormatBool(*isEmployer)}, query_builder.EQ)
	}
	if len(skills) > 0 {
		convSkills := util.Map(skills, func(s *string) string {
			return fmt.Sprintf("\"%s\"", *s)
		})
		q.Filter("skill", convSkills, query_builder.IN)
	}
	if lookingForOpportunities != nil {
		q.Filter("isLookingForOpportunities", []string{strconv.FormatBool(*lookingForOpportunities)}, query_builder.EQ)
	}
	qs := q.GroupBy([]string{"id", "name", "email", "isEmployer", "location", "lookingForOpportunities"}).Build()

	fmt.Println(qs)
	res, err := r.Repo.Query(qs)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	fmt.Println("res:", res)

	users := make([]*model.User, 0)
	for _, user := range res.Solutions() {
		obj, err := util.MapRdfUserToGQL(user)
		if err != nil {
			return nil, err
		}
		users = append(users, obj)
	}
	return users, nil
}

// GetVacancies is the resolver for the getVacancies field.
func (r *queryResolver) GetVacancies(ctx context.Context, title *string, location *string, requiredEducation *model.DegreeType, status *bool) ([]*model.Vacancy, error) {
	q := query_builder.
		QueryBuilder().Select([]string{"id", "title", "description", "location", "postedById", "startDate", "endDate", "status", "education"}).
		GroupConcat("experienceType", ", ", "experienceTypes", true).
		GroupConcat("experienceDuration", ", ", "experienceDurations", true).
		WhereSubject("vacancy", "Vacancy").
		Where("Id", "id").
		Where("vacancyTitle", "title").
		Where("vacancyDescription", "description").
		Where("vacancyLocation", "location").
		Where("postedBy", "postedBy").
		Where("vacancyStartDate", "startDate").
		Where("vacancyEndDate", "endDate").
		Where("vacancyStatus", "status").
		Where("requiredEducation", "education").
		Where("requiredExperienceType", "experienceType").
		Where("requiredExperienceDuration", "experienceDuration").
		WhereExtraction("postedBy", "Id", "postedById")
	if title != nil {
		q.Filter("name", []string{*title}, query_builder.EQ)
	}
	if location != nil {
		q.Filter("location", []string{*location}, query_builder.EQ)
	}
	if requiredEducation != nil {
		q.Filter("requiredEducation", []string{string(*requiredEducation)}, query_builder.EQ)
	}
	if status != nil {
		q.Filter("status", []string{strconv.FormatBool(*status)}, query_builder.EQ)
	}
	qs := q.GroupBy([]string{"id", "title", "description", "location", "postedById", "startDate", "endDate", "status", "education"}).Build()

	fmt.Println(qs)
	res, err := r.Repo.Query(qs)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	vacancies := make([]*model.Vacancy, 0)
	for _, user := range res.Solutions() {
		obj, err := util.MapRdfVacancyToGQL(user)
		if err != nil {
			return nil, err
		}
		vacancies = append(vacancies, obj)
		fmt.Println("obj:", obj)
	}
	return vacancies, nil
}

// GetVacancy is the resolver for the getVacancy field.
func (r *queryResolver) GetVacancy(ctx context.Context, id string) (*model.Vacancy, error) {
	return loaders.GetVacancy(ctx, id)
}

// GetEmployers is the resolver for the getEmployers field.
func (r *queryResolver) GetEmployers(ctx context.Context, name *string, location *string) ([]*model.Employer, error) {
	q := query_builder.
		QueryBuilder().Select([]string{"id", "name", "email", "location"}).
		GroupConcat("vacancyId", ", ", "vacancies", true).
		GroupConcat("employeeId", ", ", "employees", true).
		WhereSubject("employer", "Employer").
		Where("Id", "id").
		Where("employerName", "name").
		Where("employerEmail", "email").
		Where("employerLocation", "location").
		Where("hasVacancy", "vacancy").
		Where("hasEmployee", "employee").
		OptionalSubject("vacancy", "Vacancy").
		Optional("Id", "vacancyId").
		OptionalSubject("employee", "User").
		Optional("Id", "employeeId")
	if name != nil {
		q.Filter("name", []string{*name}, query_builder.EQ)
	}
	if location != nil {
		q.Filter("location", []string{*location}, query_builder.EQ)
	}
	qs := q.GroupBy([]string{"id", "name", "email", "location"}).Build()

	fmt.Println(qs)
	res, err := r.Repo.Query(qs)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	employers := make([]*model.Employer, 0)
	for _, employer := range res.Solutions() {
		obj, err := util.MapRdfEmployerToGQL(employer)
		if err != nil {
			return nil, err
		}
		employers = append(employers, obj)
	}
	return employers, nil
}

// GetEmployer is the resolver for the getEmployer field.
func (r *queryResolver) GetEmployer(ctx context.Context, id string) (*model.Employer, error) {
	return loaders.GetEmployer(ctx, id)
}

// GetNotifications is the resolver for the getNotifications field.
func (r *queryResolver) GetNotifications(ctx context.Context, userID string) ([]*model.Notification, error) {
	q := query_builder.
		QueryBuilder().Select([]string{"id", "title", "message", "forUserId", "createdAt"}).
		WhereSubject("notification", "Notification").
		Where("Id", "id").
		Where("notificationTitle", "title").
		Where("notificationMessage", "message").
		Where("forUser", "forUser").
		Where("notificationCreatedAt", "createdAt").
		WhereExtraction("forUser", "Id", "forUserId")
	if userID != "" {
		quotedUserID := fmt.Sprintf("\"%s\"", userID)
		q.Filter("forUserId", []string{quotedUserID}, query_builder.EQ)
	}
	qs := q.GroupBy([]string{"id", "title", "message", "forUserId", "createdAt"}).Build()

	fmt.Println(qs)
	res, err := r.Repo.Query(qs)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	fmt.Println("res:", res)

	notifications := make([]*model.Notification, 0)
	for _, notification := range res.Solutions() {
		obj, err := util.MapRdfNotificationToGQL(notification)
		if err != nil {
			return nil, err
		}
		notifications = append(notifications, obj)
	}
	return notifications, nil
}

// GetConnectionRequests is the resolver for the getConnectionRequests field.
func (r *queryResolver) GetConnectionRequests(ctx context.Context, userID string, status *bool) ([]*model.ConnectionRequest, error) {
	q := query_builder.
		QueryBuilder().Select([]string{"id", "fromUserId", "connectedToUserId", "status"}).
		WhereSubject("connectionRequest", "ConnectionRequest").
		Where("Id", "id").
		Where("fromUser", "user").
		Where("connectedToUser", "connectedTo").
		Where("requestStatus", "status").
		WhereExtraction("user", "Id", "fromUserId").
		WhereExtraction("connectedTo", "Id", "connectedToUserId")
	if userID != "" {
		quotedUserID := fmt.Sprintf("\"%s\"", userID)
		//q.Filter("fromUserId", []string{quotedUserID}, query_builder.EQ)
		q.Filter("connectedToUserId", []string{quotedUserID}, query_builder.EQ)
	}
	if status != nil && userID != "" {
		q.AndFilter("status", []string{strconv.FormatBool(*status)}, query_builder.EQ)
	} else if status != nil {
		q.Filter("status", []string{strconv.FormatBool(*status)}, query_builder.EQ)
	}
	qs := q.GroupBy([]string{"id", "fromUserId", "connectedToUserId", "status"}).Build()

	fmt.Println(qs)
	res, err := r.Repo.Query(qs)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	fmt.Println("res:", res)

	connectionRequests := make([]*model.ConnectionRequest, 0)
	for _, connectionRequest := range res.Solutions() {
		obj, err := util.MapRdfConnectionRequestToGQL(connectionRequest)
		if err != nil {
			return nil, err
		}
		connectionRequests = append(connectionRequests, obj)
	}
	return connectionRequests, nil
}

// GetPotentialCandiatesForVacancy is the resolver for the getPotentialCandiatesForVacancy field.
func (r *queryResolver) GetPotentialCandiatesForVacancy(ctx context.Context, id string, distanceInKm int) ([]*model.User, error) {
	_ = fmt.Sprintf(
		`
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX lr: <http://linkrec.example.org/schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/> 
PREFIX schema: <http://schema.org/> 
PREFIX vcard: <http://www.w3.org/2006/vcard/ns#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX esco: <http://data.europa.eu/esco/model#>
PREFIX esco_skill: <http://data.europa.eu/esco/skill/>
PREFIX ofn: <http://www.ontotext.com/sparql/functions/>
PREFIX lfn: <http://www.dotnetrdf.org/leviathan#>

SELECT ?userId ?userName ?userEmail ?userDegreeField ?userDegreeType ?userSkill ?distanceInKm
WHERE {
  # declare pi for convenience
  VALUES (?pi) { ( 3.1415926535897932384) }

  VALUES ?vacancyId {"%s"}
  ?vacancy lr:Id ?vacancyId ;
    lr:requiredSkill ?requiredSkill ;
    lr:vacancyLocation ?vacancyLoc ;
    lr:requiredDegreeType ?requiredDegreeType;
    lr:requiredDegreeField ?requiredDegreeField .
  

  ?vacancyLoc lr:longitude ?long2 ;
    lr:latitude ?lat2 .
    
  ?user lr:Id ?userId ;
    lr:hasEmail ?userEmail ;
    lr:hasName ?userName ;
    lr:hasLocation ?userLoc;
    lr:hasSkill ?requiredSkill;  
    lr:hasEducation ?education ;
    lr:isProfileComplete true ;
    lr:isLookingForOpportunities true ;
    lr:isEmployer false .
    
  ?userLoc lr:longitude ?long1 ;
    lr:latitude ?lat1 .
    
  ?education lr:degreeType ?userDegreeType;
    lr:degreeField ?userDegreeField.
    

  ?userDegreeType rdfs:subClassOf* ?requiredDegreeType .
  ?userDegreeField rdfs:subClassOf* ?requiredDegreeField .
  
  BIND(6371 * 2 * lfn:sin-1(lfn:sqrt(
    lfn:pow(lfn:sin((?lat2 - ?lat1) * ?pi / 360), 2) +
    lfn:cos(?lat1 * ?pi / 180) * lfn:cos(?lat2 * ?pi / 180) *
    lfn:pow(lfn:sin((?long2 - ?long1) * ?pi / 360), 2)
  )) AS ?distanceInKm)
  
  FILTER(?distanceInKm <= %d)
}
		`, id, distanceInKm)

	panic(fmt.Errorf("not implemented: GetPotentialCandiatesForVacancy - getPotentialCandiatesForVacancy"))
}

// NewConnectionRequest is the resolver for the newConnectionRequest field.
func (r *subscriptionResolver) NewConnectionRequest(ctx context.Context, forUserID string) (<-chan *model.ConnectionRequest, error) {
	panic(fmt.Errorf("not implemented: NewConnectionRequest - newConnectionRequest"))
}

// ConnectionRequestStatusUpdate is the resolver for the connectionRequestStatusUpdate field.
func (r *subscriptionResolver) ConnectionRequestStatusUpdate(ctx context.Context, forUserID string) (<-chan *model.ConnectionRequest, error) {
	panic(fmt.Errorf("not implemented: ConnectionRequestStatusUpdate - connectionRequestStatusUpdate"))
}

// NewMatchingVacancy is the resolver for the newMatchingVacancy field.
func (r *subscriptionResolver) NewMatchingVacancy(ctx context.Context, userID string) (<-chan *model.Vacancy, error) {
	panic(fmt.Errorf("not implemented: NewMatchingVacancy - newMatchingVacancy"))
}

// NewNotification is the resolver for the newNotification field.
func (r *subscriptionResolver) NewNotification(ctx context.Context, forUserID string) (<-chan *model.Notification, error) {
	panic(fmt.Errorf("not implemented: NewNotification - newNotification"))
}

// Connections is the resolver for the connections field.
func (r *userResolver) Connections(ctx context.Context, obj *model.User) ([]*model.User, error) {
	ids := util.Map(obj.Connections, func(u *model.User) string {
		return u.ID
	})
	return loaders.GetUsers(ctx, ids)
}

// Education is the resolver for the education field.
func (r *userResolver) Education(ctx context.Context, obj *model.User) ([]*model.EducationEntry, error) {
	ids := util.Map(obj.Education, func(e *model.EducationEntry) string {
		return e.ID
	})
	return loaders.GetEducationEntries(ctx, ids)
}

// Experience is the resolver for the experience field.
func (r *userResolver) Experience(ctx context.Context, obj *model.User) ([]*model.ExperienceEntry, error) {
	ids := util.Map(obj.Experience, func(e *model.ExperienceEntry) string {
		return e.ID
	})
	return loaders.GetExperienceEntries(ctx, ids)
}

// PostedBy is the resolver for the postedBy field.
func (r *vacancyResolver) PostedBy(ctx context.Context, obj *model.Vacancy) (*model.Employer, error) {
	return loaders.GetEmployer(ctx, obj.PostedBy.ID)
}

// ConnectionRequest returns ConnectionRequestResolver implementation.
func (r *Resolver) ConnectionRequest() ConnectionRequestResolver {
	return &connectionRequestResolver{r}
}

// Employer returns EmployerResolver implementation.
func (r *Resolver) Employer() EmployerResolver { return &employerResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Notification returns NotificationResolver implementation.
func (r *Resolver) Notification() NotificationResolver { return &notificationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// Vacancy returns VacancyResolver implementation.
func (r *Resolver) Vacancy() VacancyResolver { return &vacancyResolver{r} }

type connectionRequestResolver struct{ *Resolver }
type employerResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type notificationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type vacancyResolver struct{ *Resolver }
