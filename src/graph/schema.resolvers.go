package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	graph_model "LinkKrec/graph/model"
	"context"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*graph_model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, email *string) (*graph_model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*graph_model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*graph_model.User, error) {
	res, err := r.Repo.Query(
		`PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX lr: <http://linkrec.example.org/schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX list: <http://jena.hpl.hp.com/ARQ/list#>

SELECT ?userId ?userName (GROUP_CONCAT(?skill; separator=", ") AS ?skills)
WHERE {
    ?user a lr:User ;                 # Ensure the resource is of type User
          lr:Id ?userId ;            # Retrieve the user's ID
          lr:hasName ?userName ;     # Retrieve the user's name
          lr:hasSkill ?skill .       # Retrieve the user's skills
}
GROUP BY ?userId ?userName`)
	if err != nil {
		return nil, err
	}
	// Iterate over the results
	for _, row := range res.Results.Bindings {
		fmt.Printf("name: %s", row["userName"].Value)
	}

	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
