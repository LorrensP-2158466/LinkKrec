scalar Date

type Query {
    # Fetch a specific user by ID
    getUser(id: ID!): User

    # Fetch users by filtering on various fields
    getUsers(
        name: String
        location: String
        isEmployer: Boolean
        skills: [String!]
        lookingForOpportunities: Boolean
    ): [User]

    # multiple users by ID
    getUsersById(Ids: [ID!]): [User]

    # Fetch all job vacancies with optional filtering
    getVacancies(
        title: String
        location: String
        requiredEducation: DegreeType
        status: Boolean
    ): [Vacancy]

    # Fetch a specific job vacancy by ID
    getVacancy(id: ID!): Vacancy

    # Fetch companies with optional filtering
    getCompanies(name: String, location: String): [Company]

    # Fetch specific company by ID, with details about their vacancies and employees
    getCompany(id: ID!): Company

    # Fetch all notifications for a user, with optional filtering by read status or timeframe
    getNotifications(userId: ID!): [Notification]

    # Fetch connection requests sent to a user, with optional filtering by status
    getConnectionRequests(userId: ID!, status: Boolean): [ConnectionRequest]

    matchVacancyToUsers(vacancyId: ID!, maxDist: Float!): [User]

    matchUserToVacancies(userId: ID!, maxDist: Float!): [Vacancy]

  # searching skills by name for convenience
  getSkillsByName(name: String!): [Skill!]
}

type Mutation {
    # User registration
    registerUser(input: RegisterUserInput!): User

    # when creating an account, we must set a flag that the profile is complete
    # before the user can do anything on the service
    completeUserProfile(id: ID!, input: UpdateProfileInput!): User

    # Update user profile
    updateUserProfile(id: ID!, input: UpdateProfileInput!): User

    # Add a connection between users
    addConnectionRequest(fromUserId: ID!, connectedToUserId: ID!): ConnectionRequest

    # Set connection request on not active
    setConnectionRequestStatusFalse(id: ID!): ConnectionRequest

    # Notify a user when someone visits their profile
    notifyProfileVisit(visitorId: ID!, visitedUserId: ID!): Notification

    # Create a job vacancy (companies only)
    createVacancy(companyId: ID!, input: CreateVacancyInput!): Vacancy

    # Update job vacancy details (companies only)
    updateVacancy(id: ID!, input: UpdateVacancyInput!): Vacancy

    # Delete a job vacancy (companies only)
    deleteVacancy(id: ID!): Boolean

    # Ceate a company
    createCompany(input: CreateCompanyInput!): Company

    # Update a company
    updateCompany(id: ID!, input: UpdateCompanyInput!): Company

    # Delete a company
    deleteCompany(id: ID!): Boolean

    # Set user looking for job opportunities
    updateUserLookingForOpportunities(userId: ID!, looking: Boolean!): User

    # add batch of employees to company and return every employee id
    addEmployeesToCompany(companyId: ID!, input: EmployeeIds! ): [ID!]

    # remove batch of employees from company and returns every employee Id
    removeEmployeesFromCompany(companyId: ID!, input: EmployeeIds! ): [ID!]
    
}

# We just thought about these, so we don't know if these will be used or are correct
type Subscription {
    # Notify users of a new connection request
    newConnectionRequest(forUserId: ID!): ConnectionRequest
    # Notify users of changes in connection request status (accepted or declined)
    connectionRequestStatusUpdate(forUserId: ID!): ConnectionRequest
    # Notify users when a new job vacancy that matches their profile is posted
    newMatchingVacancy(userId: ID!): Vacancy
    # Notify users of general notifications (e.g., profile views, vacancy matches)
    newNotification(forUserId: ID!): Notification
}

# User is a person who wants to use LinkRec to find jobs or connect with others
type User {
    id: ID!
    name: String!
    email: String!
    location: Location!
    connections: [User!]
    education: [EducationEntry!]
    skills: [Skill!]
    lookingForOpportunities: Boolean!
    isProfileComplete: Boolean
    companies: [Company]
}

# A company/person who wants to recruit Users
type Company {
    id: ID!
    name: String!
    email: String!
    location: Location
    vacancies: [Vacancy!]!
    employees: [User!]!
}

# A Degree obtained from an institution, used for matching candidates
enum DegreeType {
    None
    ProfBachelor
    AcBachelor
    Master
    PhD
}

enum DegreeField {
    # Computer Science and subfields
    ComputerScience
    SoftwareEngineering
    ArtificialIntelligence
    CyberSecurity
    DataScience

    # Engineering and subfields
    Engineering
    MechanicalEngineering
    ElectricalEngineering
    CivilEngineering
    ChemicalEngineering

    # Business and subfields
    Business
    Marketing
    Finance
    Management
    Entrepreneurship

    # Mathematics and subfields
    Mathematics
    PureMathematics
    AppliedMathematics
    Statistics
    MathematicalModeling

    # Physics and subfields
    Physics
    TheoreticalPhysics
    QuantumPhysics
    AstrophysicsAndAstronomy
    NuclearPhysics

    # Chemistry and subfields
    Chemistry
    OrganicChemistry
    InorganicChemistry
    PhysicalChemistry
    BiochemistryAndMolecularBiology

    # Medicine and subfields
    Medicine
    GeneralMedicine
    Surgery
    Pediatrics
    Psychiatry

    # Law and subfields
    Law
    CorporateLaw
    CriminalLaw
    InternationalLaw
    ConstitutionalLaw

    # Social Science and subfields
    SocialScience
    Sociology
    PoliticalScience
    Economics
    Anthropology

    # Humanities and subfields
    Humanities
    Literature
    Philosophy
    History
    Linguistics

    # Art and subfields
    Art
    Painting
    Sculpture
    GraphicDesign
    Photography

    # Music and subfields
    Music
    Composition
    Performance
    MusicTheory
    Conducting

    # Sport and subfields
    Sport
    SportsScience
    SportsManagement
    PhysicalEducation
    SportsTherapy

    # Education and subfields
    Education
    ElementaryEducation
    SecondaryEducation
    SpecialEducation
    EducationalLeadership

    # Psychology and subfields
    Psychology
    ClinicalPsychology
    CognitivePsychology
    DevelopmentalPsychology
    IndustrialPsychology
}

# An education that a user can put on their profile
type EducationEntry {
    id: ID!
    institution: String!
    extra_info: String
    from: Date!
    till: Date!
    degree: DegreeType!
    field: DegreeField!
}

enum ExperienceType {
    IT
    Engineering
    Sales
    HR
    Consultancy
    Research
    Marketing
    Finance
    Customer
    Support
    Operation
    # We can always add more ofcourse
}

# Same as EducationEntry, but for job experiences (not used)
type ExperienceEntry {
    id: ID!
    title: String!
    description: String
    experienceType: ExperienceType!
    startDate: String
    endDate: String
}

# A Job vacancy a Company can place on LinkRec
type Vacancy {
    id: ID!
    title: String!
    description: String!
    location: Location!
    postedBy: Company!
    startDate: String!
    endDate: String!
    status: Boolean!
    requiredDegreeType: DegreeType
    requiredDegreeField: DegreeField
    requiredExperienceDuration: Int
    requiredSkills: [Skill!]
}

# A connection request from a user to a user
type ConnectionRequest {
    id: ID!
    fromUser: User!
    connectedToUser: User!
    status: Boolean! # keep this in data so we have audit trails
}

# a notification
type Notification {
    id: ID!
    title: String!
    message: String!
    forUser: User!
    createdAt: String
}

# a location
type Location {
    id: ID!
    country: String!
    city: String!
    street: String!
    houseNumber: String!
}

# so we have access to the label and the id of the skill (esco...)
# TODO: for future, add different label languages supported by esco
type Skill {
    id: String!
    label: String!
}

input RegisterUserInput {
    name: String!
    email: String!
    isEmployer: Boolean!
    profileUpdate: UpdateProfileInput
}

input UpdateProfileInput {
    education: [EducationEntryInput!]
    experience: [ExperienceEntryInput!]
    # ids of skills, not labels
    skills: [String!]
    isLookingForOpportunities: Boolean!
    country: String!
    city: String!
    streetname: String!
    housenumber: String!
}

input EducationEntryInput {
    institution: String!
    extra_info: String
    from: Date!
    till: Date!
    degree: DegreeType!
    field: DegreeField!
}

input ExperienceEntryInput {
    title: String!
    description: String
    startDate: String
    endDate: String
}

input CreateVacancyInput {
    title: String!
    description: String!
    location: CreateLocationInput!
    startDate: String!
    endDate: String!
    status: Boolean!
    requiredDegreeType: DegreeType!
    requiredDegreeField: DegreeField!
    requiredExperienceDuration: Int!
    requiredSkills: [String]! # ids
}

input UpdateVacancyInput {
    title: String
    description: String
    location: CreateLocationInput
    startDate: String
    endDate: String
    status: Boolean
    requiredDegreeType: DegreeType
    requiredDegreeField: DegreeField
    requiredExperienceDuration: Int
    requiredSkills: [String]
}

input CreateLocationInput {
    country: String!
    city: String!
    street: String!
    houseNumber: String!
}

input CreateCompanyInput{
 name: String!
 email: String!
 location: CreateLocationInput!
}

input UpdateCompanyInput {
 id: ID!
 name: String
 email: String
 location: CreateLocationInput
} 


input EmployeeIds{
    Ids: [ID!]
}
